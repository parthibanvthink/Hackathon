$secretKey = "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"

class JsonWebToken
  class << self
    def encode(payload, exp = 24.hours.from_now)
      payload[:exp] = exp.to_i
      JWT.encode(payload, $secretKey)
    rescue JWT::JWKError
    rescue JWT::EncodeError
    end

    # this function for ruby token decode function
    def decode(token)
      # body = JWT.decode(token, Rails.application.secrets.secret_key_base)[0]
      body = JWT.decode(token, $secretKey)[0]
    rescue JWT::JWKError
      # Handle problems with the provided JWKs
    rescue JWT::DecodeError
    end
  end
end